variables:
  DOCKER_BUILDKIT: "1"
  IMAGE_TAG: $CI_REGISTRY_IMAGE/server:latest
  IMAGE_SLIM_TAG: $IMAGE_TAG-slim

services:
  - docker:dind


.docker-build:
  image: docker:latest
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# Builds the non-optimized image
build-and-push-image:
  stage: build
  extends: .docker-build
  script:
    - docker build --pull -t $IMAGE_TAG .
    - docker push $IMAGE_TAG

# Builds the optimized/slim image
build-and-push-slim-image:
  stage: build
  extends: .docker-build
  needs:
    - build-and-push-image
  # Ensure that we are not running multiple slim-jobs in parallel, as we would get port collisions!
  resource_group: docker-slim
  script:
    # Make the docker-slim tool available to the CI job
    - >
      apk add -u curl
      && curl -L -o ds.tar.gz https://downloads.dockerslim.com/releases/1.37.3/dist_linux.tar.gz
      && tar -xvf ds.tar.gz
      && mv dist_linux/docker-slim /usr/local/bin/
      && mv dist_linux/docker-slim-sensor /usr/local/bin/
    # Ensure that the fat image is cached locally
    - docker pull $IMAGE_TAG
    # Note regarding parameters: "--target" is the input, "--tag" is the output
    - >
      docker-slim build
      --http-probe-exec 'sh ./slim/http-probe.sh'
      --preserve-path-file ./slim/preserved-paths.txt
      --publish-exposed-ports
      --target $IMAGE_TAG
      --tag $IMAGE_SLIM_TAG
    - docker push $IMAGE_SLIM_TAG
  artifacts:
    expire_in: 7 days
    paths:
      - slim.report.json
  after_script:
    # If the HTTP probes fail, docker-slim does not seem to clean up the temporary container, so we do it here
    - docker rm -f $(docker ps | grep dockerslimk | awk '{print $1}') || true

# Verifies that the slim-image actually works, by running a "smoke test"
test-slim-image:
  stage: test
  image: alpine:latest
  services:
    - name: $IMAGE_SLIM_TAG
      alias: srv
  script:
    - apk add -u curl
    - curl -f http://srv:9000/

test-diagnostics-output:
  stage: test
  extends: .docker-build
  script:
    - docker pull $IMAGE_TAG
    - docker pull $IMAGE_SLIM_TAG
    - apk add -u python3 && python3 -m ensurepip --upgrade && pip3 install -r requirements.txt
    - python3 print-optimization.py $IMAGE_TAG $IMAGE_SLIM_TAG
    - python3 print-removed-files.py $IMAGE_TAG $IMAGE_SLIM_TAG > removed-file-list.txt
  artifacts:
    expire_in: 7 days
    paths:
      - removed-file-list.txt




